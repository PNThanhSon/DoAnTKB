package controllers;

import dao.HocKyDAO;
import entities.HocKy;

import javafx.beans.binding.Bindings;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.TextFieldTableCell;

import java.util.Optional;
import java.util.List;

public class QuanLyHocKyController {

    @FXML private TableView<HocKy> tableHocKy;
    @FXML private TableColumn<HocKy, String> colSTT;
    @FXML private TableColumn<HocKy, String> colMaHK;
    @FXML private TableColumn<HocKy, String> colHK;
    @FXML private TableColumn<HocKy, String> colNH;
    @FXML private TextField txtMaHk;
    @FXML private TextField txtHK;
    @FXML private TextField txtNamHoc;
    @FXML private TextField txtSearch;
    @FXML private Button btnThem;

    private final ObservableList<HocKy> dsHocKy = FXCollections.observableArrayList();
    private FilteredList<HocKy> filteredHocKyList;
    private HocKyDAO hocKyDAO;

    @FXML
    public void initialize() {
        hocKyDAO = new HocKyDAO();

        // C·∫•u h√¨nh c·ªôt
        colSTT.setCellValueFactory(cellData ->
                new ReadOnlyObjectWrapper<>(String.valueOf(tableHocKy.getItems().indexOf(cellData.getValue()) + 1)).asString()
        );
        colMaHK.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getMaHK()));
        colHK.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getTenHocKy()));
        colNH.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getNamHoc()));

        // Cho ph√©p ch·ªânh s·ª≠a tr√™n b·∫£ng cho c·ªôt H·ªçc K·ª≥ v√† NƒÉm H·ªçc
        tableHocKy.setEditable(true);
        // KH√îNG cho ph√©p s·ª≠a MaHK tr·ª±c ti·∫øp trong b·∫£ng ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
        // initEditableColumn(colMaHK, "MaHK"); // << D√≤ng n√†y ƒë√£ b·ªã lo·∫°i b·ªè/comment
        initEditableColumn(colHK, "TenHocKy");
        initEditableColumn(colNH, "NamHoc");

        // Context menu cho vi·ªác xo√° h√†ng
        tableHocKy.setRowFactory(tv -> {
            TableRow<HocKy> row = new TableRow<>();
            MenuItem delMenuItem = new MenuItem("üóë Xo√° h·ªçc k·ª≥ n√†y");
            delMenuItem.setOnAction(e -> {
                if (row.getItem() != null) {
                    xuLyXoa(row.getItem());
                }
            });
            row.contextMenuProperty().bind(
                    Bindings.when(row.emptyProperty()).then((ContextMenu) null).otherwise(new ContextMenu(delMenuItem))
            );
            return row;
        });

        taiDuLieu();

        // C·∫•u h√¨nh t√¨m ki·∫øm
        filteredHocKyList = new FilteredList<>(dsHocKy, p -> true);
        txtSearch.textProperty().addListener((observable, oldValue, newValue) -> {
            String filter = newValue == null ? "" : newValue.toLowerCase().trim();
            filteredHocKyList.setPredicate(hocKy -> {
                if (filter.isEmpty()) {
                    return true;
                }
                return hocKy.getMaHK().toLowerCase().contains(filter) ||
                        hocKy.getTenHocKy().toLowerCase().contains(filter) ||
                        hocKy.getNamHoc().toLowerCase().contains(filter);
            });
        });

        SortedList<HocKy> sortedData = new SortedList<>(filteredHocKyList);
        sortedData.comparatorProperty().bind(tableHocKy.comparatorProperty());
        tableHocKy.setItems(sortedData);

        // ƒê·∫∑t prompt text
        txtMaHk.setPromptText("V√≠ d·ª•: HK1_2425");
        txtHK.setPromptText("V√≠ d·ª•: H·ªçc K·ª≥ 1");
        txtNamHoc.setPromptText("V√≠ d·ª•: 2024-2025");
    }

    private void taiDuLieu() {
        dsHocKy.clear();
        List<HocKy> hocKyListFromDB = hocKyDAO.getAllHocKy();
        if (hocKyListFromDB != null && !hocKyListFromDB.isEmpty()) {
            dsHocKy.addAll(hocKyListFromDB);
        } else {
            // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
            System.out.println("Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc k·ª≥ n√†o trong c∆° s·ªü d·ªØ li·ªáu ho·∫∑c c√≥ l·ªói khi t·∫£i.");
        }
        System.out.println("ƒê√£ t·∫£i " + dsHocKy.size() + " h·ªçc k·ª≥ t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
    }

    private void initEditableColumn(TableColumn<HocKy, String> column, String propertyName) {
        column.setCellFactory(TextFieldTableCell.forTableColumn());

        column.setOnEditCommit(event -> {
            HocKy hocKyRow = event.getRowValue();
            String newValue = event.getNewValue();

            // Ki·ªÉm tra gi√° tr·ªã m·ªõi
            if (newValue == null) {
                tableHocKy.refresh(); // H·ªßy n·∫øu gi√° tr·ªã m·ªõi l√† null
                return;
            }
            newValue = newValue.trim();

            // L·∫•y gi√° tr·ªã hi·ªán t·∫°i ƒë·ªÉ so s√°nh
            String currentValueInObject = "";
            switch (propertyName) {
                case "TenHocKy": currentValueInObject = hocKyRow.getTenHocKy(); break;
                case "NamHoc": currentValueInObject = hocKyRow.getNamHoc(); break;
                default:
                    tableHocKy.refresh();
                    return; // Kh√¥ng n√™n x·∫£y ra n·∫øu ch·ªâ c·∫•u h√¨nh cho TenHocKy v√† NamHoc
            }

            if (newValue.equals(currentValueInObject)) {
                tableHocKy.refresh(); // H·ªßy n·∫øu kh√¥ng c√≥ thay ƒë·ªïi
                return;
            }

            // Validation
            if (newValue.isEmpty()) {
                warn(propertyName.equals("TenHocKy") ? "T√™n h·ªçc k·ª≥ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." : "NƒÉm h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                tableHocKy.refresh();
                return;
            }
            if (propertyName.equals("NamHoc") && !newValue.matches("\\d{4}-\\d{4}")) {
                warn("ƒê·ªãnh d·∫°ng nƒÉm h·ªçc kh√¥ng ƒë√∫ng (v√≠ d·ª•: 2024-2025).");
                tableHocKy.refresh();
                return;
            }

            // T·∫°o m·ªôt b·∫£n sao v√† c·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi
            HocKy hocKyToUpdate = new HocKy(hocKyRow.getMaHK(), hocKyRow.getTenHocKy(), hocKyRow.getNamHoc());

            switch (propertyName) {
                case "TenHocKy":
                    hocKyToUpdate.setTenHocKy(newValue);
                    break;
                case "NamHoc":
                    hocKyToUpdate.setNamHoc(newValue);
                    break;
            }

            // G·ªçi DAO ƒë·ªÉ c·∫≠p nh·∫≠t CSDL
            if (hocKyDAO.updateHocKy(hocKyToUpdate)) {
                // C·∫≠p nh·∫≠t ƒë·ªëi t∆∞·ª£ng trong dsHocKy ƒë·ªÉ UI ph·∫£n √°nh thay ƒë·ªïi
                hocKyRow.setTenHocKy(hocKyToUpdate.getTenHocKy());
                hocKyRow.setNamHoc(hocKyToUpdate.getNamHoc());
                info("ƒê√£ c·∫≠p nh·∫≠t h·ªçc k·ª≥ '" + hocKyRow.getMaHK() + "' th√†nh c√¥ng.");
            } else {
                warn("C·∫≠p nh·∫≠t h·ªçc k·ª≥ '" + hocKyRow.getMaHK() + "' th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra log ho·∫∑c th√¥ng b√°o l·ªói t·ª´ CSDL.");
            }
            tableHocKy.refresh(); // C·∫≠p nh·∫≠t l·∫°i b·∫£ng (quan tr·ªçng ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng n·∫øu c√≥ l·ªói ho·∫∑c ƒë·ªÉ b·ªè ch·∫ø ƒë·ªô edit)
        });
    }

    @FXML
    private void xuLyThem() {
        String maHK = txtMaHk.getText().trim();
        String tenHK = txtHK.getText().trim();
        String namHoc = txtNamHoc.getText().trim();

        if (maHK.isEmpty() || tenHK.isEmpty() || namHoc.isEmpty()) {
            warn("Vui l√≤ng nh·∫≠p ƒë·ªß M√£ HK, T√™n H·ªçc K·ª≥ v√† NƒÉm h·ªçc.");
            return;
        }

        if (hocKyDAO.maHKExists(maHK)) {
            warn("M√£ h·ªçc k·ª≥ '" + maHK + "' ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng ch·ªçn m√£ kh√°c.");
            txtMaHk.requestFocus(); // Focus v√†o tr∆∞·ªùng MaHK ƒë·ªÉ ng∆∞·ªùi d√πng s·ª≠a
            return;
        }

        if (!namHoc.matches("\\d{4}-\\d{4}")) {
            warn("ƒê·ªãnh d·∫°ng nƒÉm h·ªçc kh√¥ng ƒë√∫ng (v√≠ d·ª•: 2024-2025).");
            txtNamHoc.requestFocus();
            return;
        }

        HocKy hocKyMoi = new HocKy(maHK, tenHK, namHoc);
        if (hocKyDAO.addHocKy(hocKyMoi)) {
            dsHocKy.add(hocKyMoi);
            info("ƒê√£ th√™m h·ªçc k·ª≥ m·ªõi: " + maHK);
            txtMaHk.clear();
            txtHK.clear();
            txtNamHoc.clear();
            tableHocKy.scrollTo(hocKyMoi);
            tableHocKy.getSelectionModel().select(hocKyMoi);
        } else {
            // L·ªói ƒë√£ ƒë∆∞·ª£c log trong DAO, c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o chung h∆°n
            error("Th√™m h·ªçc k·ª≥ th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ho·∫∑c xem log ƒë·ªÉ bi·∫øt chi ti·∫øt.");
        }
    }

    private void xuLyXoa(HocKy selectedHocKy) {
        if (selectedHocKy == null) {
            // Tr∆∞·ªùng h·ª£p n√†y kh√¥ng n√™n x·∫£y ra n·∫øu g·ªçi t·ª´ context menu c·ªßa m·ªôt h√†ng c√≥ item
            warn("Kh√¥ng c√≥ h·ªçc k·ª≥ n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ xo√°.");
            return;
        }

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("X√°c nh·∫≠n xo√°");
        alert.setHeaderText("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° h·ªçc k·ª≥: " + selectedHocKy.getMaHK() + " (" + selectedHocKy.getTenHocKy() + " - " + selectedHocKy.getNamHoc() + ")?");
        alert.setContentText("H√†nh ƒë·ªông n√†y s·∫Ω xo√° d·ªØ li·ªáu kh·ªèi c∆° s·ªü d·ªØ li·ªáu v√† kh√¥ng th·ªÉ ho√†n t√°c.");
        ButtonType btnDongY = new ButtonType("ƒê·ªìng √Ω xo√°", ButtonBar.ButtonData.OK_DONE);
        ButtonType btnHuy = new ButtonType("H·ªßy", ButtonBar.ButtonData.CANCEL_CLOSE);
        alert.getButtonTypes().setAll(btnDongY, btnHuy);


        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == btnDongY) {
            if (hocKyDAO.deleteHocKy(selectedHocKy.getMaHK())) {
                dsHocKy.remove(selectedHocKy);
                info("ƒê√£ xo√° h·ªçc k·ª≥: " + selectedHocKy.getMaHK());
            } else {
                // Th√¥ng b√°o l·ªói chi ti·∫øt h∆°n ƒë√£ ƒë∆∞·ª£c DAO log, ·ªü ƒë√¢y ch·ªâ c·∫ßn th√¥ng b√°o chung
                error("Xo√° h·ªçc k·ª≥ '" + selectedHocKy.getMaHK() + "' th·∫•t b·∫°i. H·ªçc k·ª≥ c√≥ th·ªÉ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng ho·∫∑c c√≥ l·ªói CSDL.");
            }
        }
    }

    // C√°c ph∆∞∆°ng th·ª©c helper cho Alert
    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null); // Kh√¥ng d√πng header
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void info(String message) {
        showAlert(Alert.AlertType.INFORMATION, "Th√¥ng b√°o", message);
    }

    private void warn(String message) {
        showAlert(Alert.AlertType.WARNING, "C·∫£nh b√°o", message);
    }

    private void error(String message) {
        showAlert(Alert.AlertType.ERROR, "L·ªói", message);
    }
}
